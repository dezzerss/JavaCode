package ru.Vsuet.mtx; 
 
import java.util.function.Predicate; 
 
public interface IList { 
 
 /** 
 * adds value into list tail 
 * */ 
 void add(int value); 
 
 /** 
 * adds value into list by index 
 * [id153965260|@param] idx 
 * [id153965260|@param] value 
 */ 
 void add(int idx, int value); 
 
 /** 
 * removes element by index 
 * [id153965260|@param] idx 
 */ 
 void remove(int idx); 
 
 /** 
 * removes element by condition 
 * [id153965260|@param] predicate 
 */ 
 void remove(Predicate<Integer> predicate); 
 
 /** 
 * returns element by index 
 * [id153965260|@param] idx 
 * [id623884962|@return] 
 */ 
 int get(int idx); 
}


///////////////////////////////////////////////////////////////////////////////
package ru.vsuet.collection;

import java.util.function.Predicate;

public class LinkedList implements IList {
    private Node head;
    private int size;

    private static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
        }
    }

    public void add(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node currentNode = head;
            while (currentNode.next != null) {
                currentNode = currentNode.next;
            }
            currentNode.next = newNode;
        }
        size++;
    }

    @Override
    public void add(int idx, int value) {
        Node newNode = new Node(value);
        if (idx == 0) {
            newNode.next = head;
            head = newNode;
        } else {
            Node prevNode = head;
            for (int i = 0; i < idx - 1; i++) {
                prevNode = prevNode.next;
            }
            newNode.next = prevNode.next;
            prevNode.next = newNode;
        }
        size++;
    }

    public void remove(int data) {
        if (head == null) {
            return;
        }
        if (head.data == data) {
            head = head.next;
            size--;
            return;
        }
        Node currentNode = head;
        while (currentNode.next != null) {
            if (currentNode.next.data == data) {
                currentNode.next = currentNode.next.next;
                size--; // уменьшаем размер списка
                return;
            }
            currentNode = currentNode.next;
        }
    }

    @Override
    public void remove(Predicate<Integer> condition) {
        if (head == null) {
            return;
        }
        Node currentNode = head;
        while (currentNode.next != null) {
            if (condition.test(currentNode.next.data)) {
                currentNode.next = currentNode.next.next;
                size--; // уменьшаем размер списка
                return;
            }
            currentNode = currentNode.next;
        }
    }

    @Override
    public int get(int idx) {
        return 0;
    }

    @Override
    public String toString() {
        Node currentNode = head;
        while currentNode
        return "LinkedList{}";
    }

    private void print(int data) {
        Node currentNode = head;
        while (currentNode != null) {
            if (currentNode.data == data) {
                System.out.println(currentNode.data);
                return;
            }
            currentNode = currentNode.next;
        }
        System.out.println("Элемент с id " + data + " не найден.");
    }

    private void printAll() {
        if (head == null) {
            System.out.println("Список пуст");
            return;
        }
        Node currentNode = head;
        while (currentNode != null) {
            System.out.print(currentNode.data + " ");
            currentNode = currentNode.next;
        }
    }
}
//
Main 

import java.util.function.Predicate;

public class Main {
    public static void main(String[] args) {
       LinkedList list = new LinkedList();
       list.add(1);
       list.add(2);
       list.add(3);
       list.add(4);
//       list.print(3);
       System.out.println("Element with index: " + 3 + " = " + list.get(3));
       list.remove(2);
       list.add(0, 0);
       list.add(2,5);

       Predicate<String> c = value -> value.equals("test");

       list.remove(value -> value == 5);
       list.remove(value -> value < 0);

       System.out.println(list); // [1, 2, 4, ...]
    }
}
